const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const ejs = require('ejs');

const app = express();
app.set('view engine', 'ejs');
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

// Connessione al database MongoDB
mongoose.connect('mongodb://localhost:27017/blogDB', { useNewUrlParser: true, useUnifiedTopology: true });

// Definizione dello schema del post
const postSchema = {
    title: String,
    content: String
};

// Modello del post
const Post = mongoose.model('Post', postSchema);

// Pagina principale del blog
app.get('/', function (req, res) {
    // Trova tutti i post nel database
    Post.find({}, function (err, posts) {
        if (!err) {
            res.render('home', { posts: posts });
        } else {
            console.log(err);
        }
    });
});

// Pagina di creazione di un nuovo post
app.get('/compose', function (req, res) {
    res.render('compose');
});

// Gestisce la creazione di un nuovo post
app.post('/compose', function (req, res) {
    const newPost = new Post({
        title: req.body.postTitle,
        content: req.body.postContent
    });

    // Salva il nuovo post nel database
    newPost.save(function (err) {
        if (!err) {
            res.redirect('/');
        } else {
            console.log(err);
        }
    });
});

// Pagina di visualizzazione di un singolo post
app.get('/posts/:postId', function (req, res) {
    const requestedPostId = req.params.postId;

    // Trova il post nel database in base all'ID
    Post.findOne({ _id: requestedPostId }, function (err, post) {
        if (!err) {
            res.render('post', { post: post });
        } else {
            console.log(err);
        }
    });
});

// Avvio del server sulla porta 3000
app.listen(3000, function () {
    console.log('Server avviato sulla porta 3000');
});
